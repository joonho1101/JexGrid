;
; =========================
; Closure Compiler Settings
; =========================
;
; Note that settings here will be overriden by settings in make on collision.
;


; --accept_const_keyword                 : Allows usage of const keyword.
accept_const_keyword=


; --charset VAL                          : Input and output charset for all files
;                                          . By default, we accept UTF-8 as input
;                                           and output US_ASCII
charset=euc-kr


; --closure_entry_point VAL              : Entry points to the program. Must be g
;                                          oog.provide'd symbols. Any goog.provid
;                                          e'd symbols that are not a transitive
;                                          dependency of the entry points will be
;                                           removed. Files without goog.provides,
;                                           and their dependencies, will always b
;                                          e left in. If any entry points are spe
;                                          cified, then the manage_closure_depend
;                                          encies option will be set to true and
;                                          all files will be sorted in dependency
;                                           order.
closure_entry_point=JGM


; --compilation_level [WHITESPACE_ONLY | : Specifies the compilation level to use
;  SIMPLE_OPTIMIZATIONS | ADVANCED_OPTIM : . Options: WHITESPACE_ONLY, SIMPLE_OPT
; IZATIONS]                              : IMIZATIONS, ADVANCED_OPTIMIZATIONS
compilation_level=SIMPLE_OPTIMIZATIONS


; --create_name_map_files                : If true, variable renaming and propert
;                                          y renaming map files will be produced
;                                          as {binary name}_vars_map.out and {bin
;                                          ary name}_props_map.out. Note that thi
;                                          s flag cannot be used in conjunction w
;                                          ith either variable_map_output_file or
;                                           property_map_output_file
create_name_map_files=FLAG_SET


; --create_source_map VAL                : If specified, a source map file mappin
;                                          g the generated source files back to t
;                                          he original source file will be output
;                                           to the specified path. The %outname%
;                                          placeholder will expand to the name of
;                                           the output file that the source map c
;                                          orresponds to.
create_source_map=source-map/%outname%.js


; --debug                                : Enable debugging options
debug=


; --define (--D, -D) VAL                 : Override the value of a variable annot
;                                          ated @define. The format is <name>[=<v
;                                          al>], where <name> is the name of a @d
;                                          efine variable and <val> is a boolean,
;                                           number, or a single-quoted string tha
;                                          t contains no single quotes. If [=<val
;                                          >] is omitted, the variable is marked
;                                          true
define=


; --externs VAL                          : The file containing javascript externs
;                                          . You may specify multiple
externs=


; --flagfile VAL                         : A file containing additional command-l
;                                          ine options.
flagfile=


; --formatting [PRETTY_PRINT | PRINT_INP : Specifies which formatting options, if
; UT_DELIMITER]                          :  any, should be applied to the output
;                                          JS. Options: PRETTY_PRINT, PRINT_INPUT
;                                          _DELIMITER
formatting=PRETTY_PRINT


; --generate_exports                     : Generates export code for those marked
;                                           with @export
generate_exports=FLAG_SET


; --help                                 : Displays this message
help=


; --js VAL                               : The javascript filename. You may speci
;                                          fy multiple
js=


; --js_output_file VAL                   : Primary output filename. If not specif
;                                          ied, output is written to stdout
js_output_file=


; --jscomp_error VAL                     : Make the named class of warnings an er
;                                          ror. Options:accessControls, ambiguous
;                                          FunctionDecl, checkRegExp,checkTypes,
;                                          checkVars, constantProperty, deprecate
;                                          d, externsValidation, fileoverviewTags
;                                          , globalThis, internetExplorerChecks,
;                                          invalidCasts, missingProperties, nonSt
;                                          andardJsDocs, strictModuleDepCheck, ty
;                                          peInvalidation, undefinedVars, unknown
;                                          Defines, uselessCode, visibility
jscomp_error=


; --jscomp_off VAL                       : Turn off the named class of warnings.
;                                          Options:accessControls, ambiguousFunct
;                                          ionDecl, checkRegExp,checkTypes, check
;                                          Vars, constantProperty, deprecated, ex
;                                          ternsValidation, fileoverviewTags, glo
;                                          balThis, internetExplorerChecks, inval
;                                          idCasts, missingProperties, nonStandar
;                                          dJsDocs, strictModuleDepCheck, typeInv
;                                          alidation, undefinedVars, unknownDefin
;                                          es, uselessCode, visibility
jscomp_off=


; --jscomp_warning VAL                   : Make the named class of warnings a nor
;                                          mal warning. Options:accessControls, a
;                                          mbiguousFunctionDecl, checkRegExp,chec
;                                          kTypes, checkVars, constantProperty, d
;                                          eprecated, externsValidation, fileover
;                                          viewTags, globalThis, internetExplorer
;                                          Checks, invalidCasts, missingPropertie
;                                          s, nonStandardJsDocs, strictModuleDepC
;                                          heck, typeInvalidation, undefinedVars,
;                                           unknownDefines, uselessCode, visibili
;                                          ty
jscomp_warning=


; --language_in VAL                      : Sets what language spec that input sou
;                                          rces conform. Options: ECMASCRIPT3 (de
;                                          fault), ECMASCRIPT5, ECMASCRIPT5_STRIC
;                                          T
language_in=


; --logging_level VAL                    : The logging level (standard java.util.
;                                          logging.Level values) for Compiler pro
;                                          gress. Does not control errors or warn
;                                          ings for the JavaScript code under com
;                                          pilation
logging_level=


; --manage_closure_dependencies          : Automatically sort dependencies so tha
;                                          t a file that goog.provides symbol X w
;                                          ill always come before a file that goo
;                                          g.requires symbol X. If an input provi
;                                          des symbols, and those symbols are nev
;                                          er required, then that input will not
;                                          be included in the compilation.
manage_closure_dependencies=FLAG_SET


; --module VAL                           : A javascript module specification. The
;                                           format is <name>:<num-js-files>[:[<de
;                                          p>,...][:]]]. Module names must be uni
;                                          que. Each dep is the name of a module
;                                          that this module depends on. Modules m
;                                          ust be listed in dependency order, and
;                                           js source files must be listed in the
;                                           corresponding order. Where --module f
;                                          lags occur in relation to --js flags i
;                                          s unimportant
module=


; --module_output_path_prefix VAL        : Prefix for filenames of compiled js mo
;                                          dules. <module-name>.js will be append
;                                          ed to this prefix. Directories will be
;                                           created as needed. Use with --module
module_output_path_prefix=


; --module_wrapper VAL                   : An output wrapper for a javascript mod
;                                          ule (optional). The format is <name>:<
;                                          wrapper>. The module name must corresp
;                                          ond with a module specified using --mo
;                                          dule. The wrapper must contain %s as t
;                                          he code placeholder
module_wrapper=


; --output_manifest VAL                  : Prints out a list of all the files in
;                                          the compilation. If --manage_closure_d
;                                          ependencies is on, this will not inclu
;                                          de files that got dropped because they
;                                           were not required. The %outname% plac
;                                          eholder expands to the js output file.
;                                           If you're using modularization, using
;                                           %outname% will create a manifest for
;                                          each module.
output_manifest=manifest/%outname%


; --output_wrapper VAL                   : Interpolate output into this string at
;                                           the place denoted by the marker token
;                                           %output%. See --output_wrapper_marker
output_wrapper=


; --print_ast                            : Prints a dot file describing the inter
;                                          nal abstract syntax tree and exits
print_ast=FLAG_SET


; --print_pass_graph                     : Prints a dot file describing the passe
;                                          s that will get run and exits
print_pass_graph=FLAG_SET


; --print_tree                           : Prints out the parse tree and exits
print_tree=FLAG_SET


; --process_closure_primitives           : Processes built-ins from the Closure l
;                                          ibrary, such as goog.require(), goog.p
;                                          rovide(), and goog.exportSymbol()
process_closure_primitives=FLAG_SET


; --property_map_input_file VAL          : File containing the serialized version
;                                           of the property renaming map produced
;                                           by a previous compilation
property_map_input_file=


; --property_map_output_file VAL         : File where the serialized version of t
;                                          he property renaming map produced shou
;                                          ld be saved
property_map_output_file=


; --summary_detail_level N               : Controls how detailed the compilation
;                                          summary is. Values: 0 (never print sum
;                                          mary), 1 (print summary only if there
;                                          are errors or warnings), 2 (print summ
;                                          ary if type checking is on, see --chec
;                                          k_types), 3 (always print summary). Th
;                                          e default level is 1
summary_detail_level=3


; --third_party                          : Check source validity but do not enfor
;                                          ce Closure style rules and conventions
third_party=FLAG_SET


; --use_only_custom_externs              : Specifies whether the default externs
;                                          should be excluded
use_only_custom_externs=


; --variable_map_input_file VAL          : File containing the serialized version
;                                           of the variable renaming map produced
;                                           by a previous compilation
variable_map_input_file=


; --variable_map_output_file VAL         : File where the serialized version of t
;                                          he variable renaming map produced shou
;                                          ld be saved
variable_map_output_file=


; --version                              : Prints the compiler version to stderr.
version=FLAG_SET


; --warning_level [QUIET | DEFAULT | VER : Specifies the warning level to use. Op
; BOSE]                                  : tions: QUIET, DEFAULT, VERBOSE
warning_level=VERBOSE
